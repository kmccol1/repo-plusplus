#include <iostream>
using namespace std;

void putMedianLeft ( int list [], int left, int right )
{
    int mid;
    mid = (left + right ) / 2;
    
    if ( list[left] < list[mid] )
        swap ( list[left], list[mid]);
        
    if ( list[mid] > list[right])
        swap (list[mid],list[right]);
    
    if ( list[left] > list[right])
        swap ( list[left],list[right]);
}

int partition ( int list[],  int left , int right )
{
    int lte,
        gt;
        
    int pivotPt;
    
    pivotPt = (left+right)/2;
        
    lte = left + 1;
    gt = right;
    
    while ( lte < gt )
    {
        while ( list[lte] <= list[pivotPt] )
            lte += 1;
        
        
        while ( list[gt] > list[pivotPt] )
            gt -= 1;
        
    }
    
    swap ( list[pivotPt] , list[gt] );
    
    return gt;
}


void _quickSort ( int list [] , int left , int right )
{
    int pivotPt;
    
    putMedianLeft ( list , left , right );
    
    pivotPt = partition ( list , left , right );
    
    _quickSort ( list , left , pivotPt - 1 );
    _quickSort ( list , pivotPt + 1 , right );
}

void quickSort ( int list[], int size )
{
    _quickSort ( list , 0 , ( size - 1 ));
}

int main ( )
{
    
    int list [5] = {16,8,4,2,1};
    int size = 5;
    
     for ( int i = 0; i < size; i++ )
        cout << list[i] << endl;
    
    quickSort ( list , size );
    
    for ( int i = 0; i < size; i++ )
        cout << list[i] << endl;
        
    cout << list[0] << endl;
    
    return 0;
}